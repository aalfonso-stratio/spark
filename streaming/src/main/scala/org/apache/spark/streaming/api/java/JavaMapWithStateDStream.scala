/*
 * © 2017 Stratio Big Data Inc., Sucursal en España. All rights reserved
 *
 * This software is a modification of the original software Apache Spark licensed under the Apache 2.0
 * license, a copy of which is below. This software contains proprietary information of
 * Stratio Big Data Inc., Sucursal en España and may not be revealed, sold, transferred, modified, distributed or
 * otherwise made available, licensed or sublicensed to third parties; nor reverse engineered, disassembled or decompiled,
 * without express written authorization from Stratio Big Data Inc., Sucursal en España.
 */
package org.apache.spark.streaming.api.java

import org.apache.spark.annotation.Experimental
import org.apache.spark.api.java.JavaSparkContext
import org.apache.spark.streaming.dstream.MapWithStateDStream

/**
 * :: Experimental ::
 * DStream representing the stream of data generated by `mapWithState` operation on a
 * [[JavaPairDStream]]. Additionally, it also gives access to the
 * stream of state snapshots, that is, the state data of all keys after a batch has updated them.
 *
 * @tparam KeyType Class of the keys
 * @tparam ValueType Class of the values
 * @tparam StateType Class of the state data
 * @tparam MappedType Class of the mapped data
 */
@Experimental
class JavaMapWithStateDStream[KeyType, ValueType, StateType, MappedType] private[streaming](
    dstream: MapWithStateDStream[KeyType, ValueType, StateType, MappedType])
  extends JavaDStream[MappedType](dstream)(JavaSparkContext.fakeClassTag) {

  def stateSnapshots(): JavaPairDStream[KeyType, StateType] =
    new JavaPairDStream(dstream.stateSnapshots())(
      JavaSparkContext.fakeClassTag,
      JavaSparkContext.fakeClassTag)
}
